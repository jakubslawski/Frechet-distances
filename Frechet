import numpy as np
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import math
from typing import Callable

######################################################
#data points of polygonal curves:

FeIII_QD510 = np.array([[0.0, 0.0],
                        [5.0, 19.862],
                        [10.0, 30.503],
                        [15.0, 36.295],
                        [20.0, 42.232],
                        [25.0, 46.184],
                        [30.0, 47.668]])
FeII_QD510 = np.array([[0.0, 0.0],
                       [5.0, 16.283],
                       [10.0, 26.461],
                       [15.0, 28.862],
                       [20.0, 30.615],
                       [25.0, 27.517],
                       [30.0, 28.350]])
porph_QD510 = np.array([[0.0, 0.0],
                        [5.0, 26.205],
                        [10.0, 36.140],
                        [15.0, 46.125],
                        [20.0, 58.356],
                        [25.0, 52.724],
                        [30.0, 55.860]])
Zn_QD510 = np.array([[0.0, 0.0],
                     [5.0, 10.296],
                     [10.0, 19.825],
                     [15.0, 26.249],
                     [20.0, 28.376],
                     [25.0, 34.627],
                     [30.0, 35.657]])
Sn_QD510 = np.array([[0.0, 0.0],
                     [5.0, 31.413],
                     [10.0, 37.518],
                     [15.0, 39.201],
                     [20.0, 36.682],
                     [25.0, 24.973],
                     [30.0, 19.945]])

FeIII_QD550 = np.array([[0.0, 0.0],
                        [5.0, 12.424],
                        [10.0, 23.578],
                        [15.0, 31.268],
                        [20.0, 36.602],
                        [25.0, 34.131],
                        [30.0, 35.774]])
FeII_QD550 = np.array([[0.0, 0.0],
                       [5.0, 13.132],
                       [10.0, 19.980],
                       [15.0, 25.732],
                       [20.0, 30.075],
                       [25.0, 36.050],
                       [30.0, 34.645]])
porph_QD550 = np.array([[0.0, 0.0],
                        [5.0, 20.938],
                        [10.0, 34.362],
                        [15.0, 36.423],
                        [20.0, 47.140],
                        [25.0, 50.723],
                        [30.0, 49.541]])
Zn_QD550 = np.array([[0.0, 0.0],
                     [5.0, 8.152],
                     [10.0, 10.646],
                     [15.0, 12.223],
                     [20.0, 4.227],
                     [25.0, 5.871],
                     [30.0, 4.450]])
Sn_QD550 = np.array([[0.0, 0.0],
                     [5.0, 24.371],
                     [10.0, 37.135],
                     [15.0, 45.403],
                     [20.0, 45.284],
                     [25.0, 37.650],
                     [30.0, 35.651]])

######################################################
#functions:
    
def euclidean(p: np.ndarray, q: np.ndarray) -> float:
    d = p - q
    return math.sqrt(np.dot(d, d))

def linear_frechet(p: np.ndarray, q: np.ndarray, dist_func:
                   Callable[[np.ndarray, np.ndarray], float]) -> float:
    n_p = p.shape[0]
    n_q = q.shape[0]
    ca = np.zeros((n_p, n_q), dtype=np.float64)

    for i in range(n_p):
        for j in range(n_q):
            d = dist_func(p[i], q[j])

            if i > 0 and j > 0:
                ca[i, j] = max(min(ca[i - 1, j],
                                   ca[i - 1, j - 1],
                                   ca[i, j - 1]), d)
            elif i > 0 and j == 0:
                ca[i, j] = max(ca[i - 1, 0], d)
            elif i == 0 and j > 0:
                ca[i, j] = max(ca[0, j - 1], d)
            else:
                ca[i, j] = d
    return ca[n_p - 1, n_q - 1]

######################################################
#execution:

QD510_results = [('Fe(III)& +Fe(II)', linear_frechet(FeIII_QD510, FeII_QD510, euclidean)),
                 ('Fe(III) & +porph', linear_frechet(FeIII_QD510, porph_QD510, euclidean)),
                 ('Fe(III) & +Zn', linear_frechet(FeIII_QD510, Zn_QD510, euclidean)),
                 ('Fe(III) & +Sn', linear_frechet(FeIII_QD510, Sn_QD510, euclidean)),
                 ('+Fe(II) & +porph', linear_frechet(FeII_QD510, porph_QD510, euclidean)),
                 ('+Fe(II) & +Zn', linear_frechet(FeII_QD510, Zn_QD510, euclidean)),
                 ('+Fe(II) & +Sn', linear_frechet(FeII_QD510, Sn_QD510, euclidean)),
                 ('+porph & +Zn', linear_frechet(porph_QD510, Zn_QD510, euclidean)),
                 ('+porph & +Sn', linear_frechet(porph_QD510, Sn_QD510, euclidean)),
                 ('+Zn & +Sn', linear_frechet(Zn_QD510, Sn_QD510, euclidean))]

QD550_results = [('Fe(III)& +Fe(II)', linear_frechet(FeIII_QD550, FeII_QD550, euclidean)),
                 ('Fe(III) & +porph', linear_frechet(FeIII_QD550, porph_QD550, euclidean)),
                 ('Fe(III) & +Zn', linear_frechet(FeIII_QD550, Zn_QD550, euclidean)),
                 ('Fe(III) & +Sn', linear_frechet(FeIII_QD550, Sn_QD550, euclidean)),
                 ('+Fe(II) & +porph', linear_frechet(FeII_QD550, porph_QD550, euclidean)),
                 ('+Fe(II) & +Zn', linear_frechet(FeII_QD550, Zn_QD550, euclidean)),
                 ('+Fe(II) & +Sn', linear_frechet(FeII_QD550, Sn_QD550, euclidean)),
                 ('+porph & +Zn', linear_frechet(porph_QD550, Zn_QD550, euclidean)),
                 ('+porph & +Sn', linear_frechet(porph_QD550, Sn_QD550, euclidean)),
                 ('+Zn & +Sn', linear_frechet(Zn_QD550, Sn_QD550, euclidean))]


print ('Frechet distances for QD510:')
print (np.array(QD510_results))
print ('Frechet distances for QD550:')
print (np.array(QD550_results))

######################################################
#plots:

curves510 = [FeIII_QD510, FeII_QD510, porph_QD510, Zn_QD510, Sn_QD510]
curves550 = [FeIII_QD550, FeII_QD550, porph_QD550, Zn_QD550, Sn_QD550]
QD510_frechets = [a[1] for a in QD510_results]
QD550_frechets = [a[1] for a in QD550_results]
QD_labels = [a[0] for a in QD510_results]
QD_types = [curves510, curves550]
ind = list (range (0,10))

plt.subplot(2, 2, 1).set_title ('QD510 - photoreduction curves')
plt.xlabel('time [min]')
plt.ylabel('reduction level [%]')
for curve in curves510:
    xs = curve[:,0]
    ys = curve[:,1]
    plt.plot(xs, ys, '-o')

plt.subplot(2, 2, 2).set_title ('QD550 - photoreduction curves')
plt.xlabel('time [min]')
plt.ylabel('reduction level [%]')
for curve in curves550:
    xs = curve[:,0]
    ys = curve[:,1]
    plt.plot(xs, ys, '-o')
        
plt.subplot(2, 2, 3).set_title ('QD510 - Frechet distances')
plt.xlabel('CytC pair compared')
plt.ylabel('Frechet distance')
plt.xticks(ind, QD_labels, rotation='vertical')
plt.bar(ind, QD510_frechets)

plt.subplot(2, 2, 4).set_title ('QD550 - Frechet distances')
plt.xlabel('CytC pair compared')
plt.ylabel('Frechet distance')
plt.xticks(ind, QD_labels, rotation='vertical')
plt.bar(ind, QD550_frechets)

legend_labels = []
colors = [u'#1f77b4', u'#ff7f0e', u'#2ca02c', u'#d62728', u'#9467bd']
count_color = 0
for curve in curves550:
    xs = curve[:,0]
    ys = curve[:,1]
    lines = mlines.Line2D(xs, ys, color = colors[count_color])
    legend_labels.append(lines)
    count_color +=1
                          
plt.figlegend(legend_labels,
              ('Fe(III)CytC', '+ Fe(II)CytC', '+ porphCytC', '+ ZnCytC', '+ SnCytC'),
              'upper right')

plt.tight_layout()
plt.show ()

